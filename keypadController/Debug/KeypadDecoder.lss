
KeypadDecoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a3  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051e  00000000  00000000  00000707  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000209  00000000  00000000  00000c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002dd  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004a  00000000  00000000  00001141  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000118b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	20 c0       	rjmp	.+64     	; 0x76 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
{    

	
    bool row[8];
	
	TWAR	= 0x24;
  38:	84 e2       	ldi	r24, 0x24	; 36
  3a:	82 b9       	out	0x02, r24	; 2
	
    DDRB	= 0b00011111;	// Enable PORTB0...5 (columns) as output.
  3c:	8f e1       	ldi	r24, 0x1F	; 31
  3e:	87 bb       	out	0x17, r24	; 23
    DDRD	= 0x00;			// Better safe than sorry.
  40:	11 ba       	out	0x11, r1	; 17
	DDRC	= 0x00;			// Ditto.   
  42:	14 ba       	out	0x14, r1	; 20
    {
		
		        
        for (int i = 0; i < 5; i++)
        {
            PORTB|=(1<<i);
  44:	61 e0       	ldi	r22, 0x01	; 1
  46:	70 e0       	ldi	r23, 0x00	; 0
    
    while (1) 
    {
		
		        
        for (int i = 0; i < 5; i++)
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	30 e0       	ldi	r19, 0x00	; 0
        {
            PORTB|=(1<<i);
  4c:	48 b3       	in	r20, 0x18	; 24
  4e:	cb 01       	movw	r24, r22
  50:	02 2e       	mov	r0, r18
  52:	02 c0       	rjmp	.+4      	; 0x58 <__SREG__+0x19>
  54:	88 0f       	add	r24, r24
  56:	99 1f       	adc	r25, r25
  58:	0a 94       	dec	r0
  5a:	e2 f7       	brpl	.-8      	; 0x54 <__SREG__+0x15>
  5c:	94 2f       	mov	r25, r20
  5e:	98 2b       	or	r25, r24
  60:	98 bb       	out	0x18, r25	; 24
			row[6] = PIND4;
			row[7] = PIND5;
            
			sendbtn(row);
			
			PORTB&=~(1<<i);
  62:	98 b3       	in	r25, 0x18	; 24
  64:	80 95       	com	r24
  66:	89 23       	and	r24, r25
  68:	88 bb       	out	0x18, r24	; 24
    
    while (1) 
    {
		
		        
        for (int i = 0; i < 5; i++)
  6a:	2f 5f       	subi	r18, 0xFF	; 255
  6c:	3f 4f       	sbci	r19, 0xFF	; 255
  6e:	25 30       	cpi	r18, 0x05	; 5
  70:	31 05       	cpc	r19, r1
  72:	61 f7       	brne	.-40     	; 0x4c <__SREG__+0xd>
  74:	e9 cf       	rjmp	.-46     	; 0x48 <__SREG__+0x9>

00000076 <_exit>:
  76:	f8 94       	cli

00000078 <__stop_program>:
  78:	ff cf       	rjmp	.-2      	; 0x78 <__stop_program>
