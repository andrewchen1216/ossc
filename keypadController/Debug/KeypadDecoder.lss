
KeypadDecoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000048  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  00800040  0000009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000009c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000507  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000494  00000000  00000000  0000062f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001bd  00000000  00000000  00000ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002df  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000f83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	11 c0       	rjmp	.+34     	; 0x24 <__ctors_end>
   2:	18 c0       	rjmp	.+48     	; 0x34 <__bad_interrupt>
   4:	17 c0       	rjmp	.+46     	; 0x34 <__bad_interrupt>
   6:	16 c0       	rjmp	.+44     	; 0x34 <__bad_interrupt>
   8:	15 c0       	rjmp	.+42     	; 0x34 <__bad_interrupt>
   a:	14 c0       	rjmp	.+40     	; 0x34 <__bad_interrupt>
   c:	13 c0       	rjmp	.+38     	; 0x34 <__bad_interrupt>
   e:	12 c0       	rjmp	.+36     	; 0x34 <__bad_interrupt>
  10:	11 c0       	rjmp	.+34     	; 0x34 <__bad_interrupt>
  12:	10 c0       	rjmp	.+32     	; 0x34 <__bad_interrupt>
  14:	0f c0       	rjmp	.+30     	; 0x34 <__bad_interrupt>
  16:	0e c0       	rjmp	.+28     	; 0x34 <__bad_interrupt>
  18:	0d c0       	rjmp	.+26     	; 0x34 <__bad_interrupt>
  1a:	0c c0       	rjmp	.+24     	; 0x34 <__bad_interrupt>
  1c:	0b c0       	rjmp	.+22     	; 0x34 <__bad_interrupt>
  1e:	0a c0       	rjmp	.+20     	; 0x34 <__bad_interrupt>
  20:	09 c0       	rjmp	.+18     	; 0x34 <__bad_interrupt>
  22:	08 c0       	rjmp	.+16     	; 0x34 <__bad_interrupt>

00000024 <__ctors_end>:
  24:	11 27       	eor	r17, r17
  26:	1f bf       	out	0x3f, r17	; 63
  28:	cf e3       	ldi	r28, 0x3F	; 63
  2a:	d1 e0       	ldi	r29, 0x01	; 1
  2c:	de bf       	out	0x3e, r29	; 62
  2e:	cd bf       	out	0x3d, r28	; 61
  30:	02 d0       	rcall	.+4      	; 0x36 <main>
  32:	08 c0       	rjmp	.+16     	; 0x44 <_exit>

00000034 <__bad_interrupt>:
  34:	e5 cf       	rjmp	.-54     	; 0x0 <__vectors>

00000036 <main>:
#include <avr/io.h>


int main(void)
{	
	DDRA = 0b00011111; //0 stands for input, 1 stands for output
  36:	4f e1       	ldi	r20, 0x1F	; 31
  38:	41 b9       	out	0x01, r20	; 1
	DDRB = 0b00001111;
  3a:	4f e0       	ldi	r20, 0x0F	; 15
  3c:	45 b9       	out	0x05, r20	; 5
	DDRC = 0b00100100;	
  3e:	44 e2       	ldi	r20, 0x24	; 36
  40:	4c bb       	out	0x1c, r20	; 28
  42:	ff cf       	rjmp	.-2      	; 0x42 <__SREG__+0x3>

00000044 <_exit>:
  44:	f8 94       	cli

00000046 <__stop_program>:
  46:	ff cf       	rjmp	.-2      	; 0x46 <__stop_program>
